name: CI Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Install Hadolint
      - name: Install Hadolint
        run: |
          wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/hadolint

      # Lint Dockerfiles
      - name: Lint Dockerfile in Version
        run: hadolint Version/Dockerfile

      - name: Lint Dockerfile in Temp
        run: hadolint Temp/Dockerfile

      # Install pylint
      - name: Install pylint
        run: pip install pylint

      # Set PYTHONPATH and Run pylint
      - name: Use pylint to check code
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pylint Version/*.py Temp/*.py tests/*.py || exit 0
  
  test:
    runs-on: ubuntu-latest
      
    steps:
      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12
      
    # Install dependencies
      - name: Install dependencies
        run: |
             pip install -r Version/requirements.txt
             
      
      # Run tests
      - name: Run unit tests
        run: python -m unittest discover -s tests -p "test_*.py"
      
        
  build:
    runs-on: ubuntu-latest
      
    steps:
      # Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Log in to DockerHub (Replace with your credentials)
      - name: Log in to DockerHub
        uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
      
      # Build Docker image for Version
      - name: Build Version image
        run: |
             docker build -t myapp/version:latest Version/
      
      # Build Docker image for Temp
      - name: Build Temp image
        run: |
            docker build -t myapp/temp:latest Temp/
      